name: build

on:
  workflow_dispatch:
  push:
    branches: [master]
    paths-ignore:
      - "**.md"
      - ".gitignore"
      - "docs/*"
  pull_request:
    branches: [master]
    paths-ignore:
      - "**.md"
      - ".gitignore"
      - "docs/*"
  release:
    types: [published]

jobs:
  msvc:
    name: Windows ${{ matrix.arch }} ${{ matrix.build_type }}
    runs-on: windows-2022
    strategy:
      matrix:
        arch: [x86, x86_64]
        build_type: [Debug, Release]
        include:
          - arch: x86
            platform: Win32
          - arch: x86_64
            platform: x64

    steps:
      - uses: actions/checkout@v3

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1

      - name: Create Build Environment
        run: cmake -E make_directory ${{ github.workspace }}/build

      - name: Configure CMake
        shell: bash
        working-directory: ${{ github.workspace }}/build
        run: |
          OPTIONS="-DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_INSTALL_PREFIX=bin"
          OPTIONS+=" -DBuildJK2SPGame=ON"
          cmake $GITHUB_WORKSPACE -A ${{ matrix.platform }} $OPTIONS

      - name: Build
        working-directory: ${{ github.workspace }}/build
        shell: bash
        run: cmake --build . --config ${{ matrix.build_type }} -j $NUMBER_OF_PROCESSORS

      - name: Install
        if: ${{ matrix.build_type == 'Release' }}
        working-directory: ${{ github.workspace }}/build
        shell: bash
        run: cmake --install . --config ${{ matrix.build_type }}

      - uses: actions/upload-artifact@v3
        if: ${{ matrix.build_type == 'Release' }}
        with:
          name: WtfJK-windows-${{ matrix.arch }}-${{ matrix.build_type }}
          path: ${{ github.workspace }}/build/bin/JediAcademy
          if-no-files-found: error

      - uses: actions/upload-artifact@v3
        if: ${{ matrix.build_type == 'Release' }}
        with:
          name: WtfJO-windows-${{ matrix.arch }}-${{ matrix.build_type }}
          path: ${{ github.workspace }}/build/bin/JediOutcast
          if-no-files-found: error

  ubuntu:
    name: Ubuntu ${{ matrix.arch }} ${{ matrix.build_type }}
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        arch: [x86, x86_64]
        build_type: [Debug, Release]

    steps:
      - uses: actions/checkout@v3

      - name: Create Build Environment
        run: |
          if [ ${{ matrix.arch }} == "x86" ]; then
            sudo dpkg --add-architecture i386
            sudo apt-get -qq update
            sudo apt-get -y install gcc-multilib g++-multilib
          else
            sudo apt-get -qq update
            sudo apt-get install
          fi
          cmake -E make_directory ${{ github.workspace }}/build

      - name: Configure CMake
        shell: bash
        working-directory: ${{ github.workspace }}/build
        run: |
          OPTIONS="-DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/install"
          if [ ${{ matrix.arch }} == "x86" ]; then
            OPTIONS+=" -DCMAKE_TOOLCHAIN_FILE=cmake/Toolchains/linux-i686.cmake"
          fi
          OPTIONS+=" -DBuildJK2SPGame=ON"
          cmake $GITHUB_WORKSPACE $OPTIONS

      - name: Build
        working-directory: ${{ github.workspace }}/build
        shell: bash
        run: cmake --build . -j $(nproc)

      - name: Install
        if: ${{ matrix.build_type == 'Release' }}
        working-directory: ${{ github.workspace }}/build
        shell: bash
        run: cmake --install .

      - name: Create WtfJK binary archive
        if: ${{ matrix.build_type == 'Release' }}
        working-directory: ${{ github.workspace }}/install/JediAcademy
        shell: bash
        run: tar -czvf WtfJK-linux-${{ matrix.arch }}-${{ matrix.build_type }}.tar.gz *

      - name: Create WtfJO binary archive
        if: ${{ matrix.build_type == 'Release' }}
        working-directory: ${{ github.workspace }}/install/JediOutcast
        shell: bash
        run: tar -czvf WtfJO-linux-${{ matrix.arch }}-${{ matrix.build_type }}.tar.gz *

      - uses: actions/upload-artifact@v3
        if: ${{ matrix.build_type == 'Release' }}
        with:
          name: WtfJK-linux-${{ matrix.arch }}-${{ matrix.build_type }}
          path: ${{github.workspace}}/install/JediAcademy/WtfJK-linux-${{ matrix.arch }}-${{ matrix.build_type }}.tar.gz
          if-no-files-found: error

      - uses: actions/upload-artifact@v3
        if: ${{ matrix.build_type == 'Release' }}
        with:
          name: WtfJO-linux-${{ matrix.arch }}-${{ matrix.build_type }}
          path: ${{github.workspace}}/install/JediOutcast/WtfJO-linux-${{ matrix.arch }}-${{ matrix.build_type }}.tar.gz
          if-no-files-found: error

  macos:
    name: macOS ${{ matrix.arch }} ${{ matrix.build_type }}
    runs-on: macos-12
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64]
        build_type: [Debug, Release]

    steps:
      - uses: actions/checkout@v3

      - name: Create Build Environment
        run: |
          cmake -E make_directory ${{ github.workspace }}/build

      - name: Configure CMake
        shell: bash
        working-directory: ${{ github.workspace }}/build
        run: |
          OPTIONS="-DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/install"
          OPTIONS+=" -DBuildJK2SPGame=ON"
          cmake $GITHUB_WORKSPACE $OPTIONS

      - name: Build
        working-directory: ${{ github.workspace }}/build
        shell: bash
        run: cmake --build . -j $(getconf _NPROCESSORS_ONLN)

      - name: Install
        if: ${{ matrix.build_type == 'Release' }}
        working-directory: ${{ github.workspace }}/build
        shell: bash
        run: cmake --install .

      - name: Create WtfJK binary archive
        if: ${{ matrix.build_type == 'Release' }}
        working-directory: ${{ github.workspace }}/install/JediAcademy
        shell: bash
        run: |
          tar -czvf wtfjk-macos-${{ matrix.arch }}-${{ matrix.build_type }}.tar.gz *

      - name: Create WtfJO binary archive
        if: ${{ matrix.build_type == 'Release' }}
        working-directory: ${{ github.workspace }}/install/JediOutcast
        shell: bash
        run: |
          tar -czvf wtfjo_sp-macos-${{ matrix.arch }}-${{ matrix.build_type }}.tar.gz *

      - uses: actions/upload-artifact@v3
        if: ${{ matrix.build_type == 'Release' }}
        with:
          name: WtfJK-macos-${{ matrix.arch }}-${{ matrix.build_type }}
          path: ${{ github.workspace }}/install/JediAcademy/wtfjk-macos-${{ matrix.arch }}-${{ matrix.build_type }}.tar.gz
          if-no-files-found: error

      - uses: actions/upload-artifact@v3
        if: ${{ matrix.build_type == 'Release' }}
        with:
          name: WtfJO-macos-${{ matrix.arch }}-${{ matrix.build_type }}
          path: ${{ github.workspace }}/install/JediOutcast/wtfjo_sp-macos-${{ matrix.arch }}-${{ matrix.build_type }}.tar.gz
          if-no-files-found: error

  create-latest:
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs: [msvc, ubuntu, macos]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Download Artifacts
        uses: actions/download-artifact@v3

      - name: Create binary archives
        run: |
          7z a -r WtfJK-windows-x86.zip ./WtfJK-windows-x86-Release/* '-x!msvcp*.*' '-x!vcruntime*.*' '-x!concrt*.*'
          7z a -r WtfJK-windows-x86_64.zip ./WtfJK-windows-x86_64-Release/* '-x!msvcp*.*' '-x!vcruntime*.*' '-x!concrt*.*'
          mv ./WtfJK-linux-x86-Release/* WtfJK-linux-x86.tar.gz
          mv ./WtfJK-linux-x86_64-Release/* WtfJK-linux-x86_64.tar.gz
          mv ./WtfJK-macos-x86_64-Release/* WtfJK-macos-x86_64.tar.gz

          7z a -r WtfJO-windows-x86.zip ./WtfJO-windows-x86-Release/* '-x!msvcp*.*' '-x!vcruntime*.*' '-x!concrt*.*'
          7z a -r WtfJO-windows-x86_64.zip ./WtfJO-windows-x86_64-Release/* '-x!msvcp*.*' '-x!vcruntime*.*' '-x!concrt*.*'
          mv ./WtfJO-linux-x86-Release/* WtfJO-linux-x86.tar.gz
          mv ./WtfJO-linux-x86_64-Release/* WtfJO-linux-x86_64.tar.gz
          mv ./WtfJO-macos-x86_64-Release/* WtfJO-macos-x86_64.tar.gz

      - name: Create latest build
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: "latest"
          prerelease: false
          title: Latest Build
          files: |
            *.zip
            *.tar.gz

  create-release:
    if: github.event_name == 'release'
    needs: [msvc, ubuntu, macos]
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        include:
          - artifact_dir: WtfJK-windows-x86-Release/JediAcademy
            artifact_name: WtfJK-windows-x86.zip
            zip: true

          - artifact_dir: WtfJK-windows-x86_64-Release/JediAcademy
            artifact_name: WtfJK-windows-x86_64.zip
            zip: true

          - artifact_dir: WtfJK-linux-x86-Release
            artifact_name: WtfJK-linux-x86.tar.gz
            zip: false

          - artifact_dir: WtfJK-linux-x86_64-Release
            artifact_name: WtfJK-linux-x86_64.tar.gz
            zip: false

          - artifact_dir: WtfJK-macos-x86_64-Release
            artifact_name: WtfJK-macos-x86_64.tar.gz
            zip: false

          - artifact_dir: WtfJO-windows-x86-Release/JediOutcast
            artifact_name: WtfJO-windows-x86.zip
            zip: true

          - artifact_dir: WtfJO-windows-x86_64-Release/JediOutcast
            artifact_name: WtfJO-windows-x86_64.zip
            zip: true

          - artifact_dir: WtfJO-linux-x86-Release
            artifact_name: WtfJO-linux-x86.tar.gz
            zip: false

          - artifact_dir: WtfJO-linux-x86_64-Release
            artifact_name: WtfJO-linux-x86_64.tar.gz
            zip: false

          - artifact_dir: WtfJO-macos-x86_64-Release
            artifact_name: WtfJO-macos-x86_64.tar.gz
            zip: false

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Download Artifacts
        uses: actions/download-artifact@v3

      - name: Create archive
        run: |
          if [ "${{ matrix.zip }}" == "true" ]; then
            7z a -r ${{ matrix.artifact_name }} ./${{ matrix.artifact_dir }}/* '-x!msvcp*.*' '-x!vcruntime*.*' '-x!concrt*.*'
          else
            mv ./${{ matrix.artifact_dir }}/* ${{ matrix.artifact_name }}
          fi

      - name: Upload archives
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          overwrite: true
          file: ${{ matrix.artifact_name }}
